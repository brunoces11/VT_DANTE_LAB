import { createClient } from '@supabase/supabase-js'

// Configura√ß√£o do Supabase usando vari√°veis de ambiente
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || ''
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || ''

// Valida√ß√£o das vari√°veis de ambiente
if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('‚ö†Ô∏è VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY n√£o est√£o configuradas no arquivo .env')
  console.warn('‚ö†Ô∏è A aplica√ß√£o funcionar√° em modo de desenvolvimento sem Supabase')
}

export const supabase = createClient(
  supabaseUrl || 'https://placeholder.supabase.co', 
  supabaseAnonKey || 'placeholder-key', 
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false,
      storage: window.localStorage,
      storageKey: 'sb-auth-token',
      flowType: 'pkce'
    }
  }
)

// Log para debug
console.log('üîß [Supabase] Cliente inicializado');
console.log('üîß [Supabase] URL:', supabaseUrl);
console.log('üîß [Supabase] persistSession: true');
console.log('üîß [Supabase] storageKey: sb-auth-token');

// Testar se localStorage est√° funcionando
try {
  localStorage.setItem('test-storage', 'working');
  const test = localStorage.getItem('test-storage');
  localStorage.removeItem('test-storage');
  console.log('‚úÖ [Supabase] localStorage funcionando:', test === 'working');
} catch (error) {
  console.error('‚ùå [Supabase] localStorage N√ÉO est√° funcionando:', error);
}